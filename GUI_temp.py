# -*- coding: utf-8 -*-
# 设计模式：过程式编程
# Form implementation generated from reading ui file 'test3.ui'
# Created by: PyQt5 UI code generator 5.15.4
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
# Written by Dianjun aided with QtDesigner. Toichi Tanaka helps to make it better and able to work fluently.

import time
import sys
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QIcon, QPixmap
from PyQt5.QtWidgets import QGraphicsDropShadowEffect
import multiprocessing
import threading
from duoji import duoji
import face_detection
import GUI_Button


class GUI(object):
    '''Gui program

    Attributes:
        Mainwindow: the window where widgets put on.
        _screen_status: indicates where the program status is on. Totally 5 status are possible.

    '''
    @staticmethod
    def print_good():
        print("Good!")

    def __init__(self):
        self.Mainwindow = QtWidgets.QWidget()
        self.setup_Mainwindow()
        self._screen_status = 0

        # Declare some global variables. Includes necessary buttons and picture label
        self.button_blank
        self.button_recyclable
        self.button_nonrecyclable
        self.button_dustman
        self.button_close_cover

        self.publicity_pic
        self.reminder_slogon
        self.working_status_annoucer
        self.pollution_alarm


    def change_status(self, status: int):
        '''Show the status of mainscrenn. Each status is pre-designed ann range from 0 to 5. 0 is the initial state.'''
        if status is not range(0, 5):
            raise Exception("Status should be 0-5.")
        else:
            self._screen_status = status

    def setup_Mainwindow(self):
        self.Mainwindow.setObjectName("Mainwindow")
        self.Mainwindow.setEnabled(True)
        self.Mainwindow.resize(1280, 800)
        self.Mainwindow.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.Mainwindow.setWindowOpacity(1.0)  # set the opacity of the window. When set to 0, the window is invisible
        self.Mainwindow.setStyleSheet("background-image:url(GUI_resources/新背景图片.png)")

        # Some basic elements needed to replace on the mainscreen at first
        self.button_blank = GUI_Button.Button( self.Mainwindow, 2)
        self.button_recyclable = GUI_Button.Button(self.Mainwindow)
        self.button_nonrecyclable = GUI_Button.Button(self.Mainwindow)
        self.button_dustman = GUI_Button.Button(self.Mainwindow)
        self.button_close_cover = GUI_Button.Button(self.Mainwindow)
        self.initial_Buttons()
        self.initial_labels()

    def initial_labels(self):
        self.publicity_pic = self.set_label(305, 100, 855, 530,"background-image:url(GUI_resources/可回收垃圾核对.png)","publicity_pic",False)
        self.reminder_slogon = self.set_label(0, 0, 1280, 43,"background-image:url(GUI_resources/请确认您的垃圾受否属于该种类，再次点击将开盖.png)",'reminder_slogon',False)
        self.working_status_annoucer = self.set_label(0,0,1280,800,"background-image:url(GUI_resources/正在开盖，请稍等…….png)",'working_status_annoucer',False)
        self.pollution_alarm = self.set_label(305, 100, 855, 530,"background-image:url(GUI_resources/垃圾分类污染图1.png)",'pollution_alarm',False)

    def initial_Buttons(self):
        '''Default details for these re-set buttons'''
        # Button left blank
        self.button_blank.setGeometry(QtCore.QRect(-10, -10, 1380, 900))
        self.button_blank.setAutoFillBackground(False)
        self.button_blank.setObjectName("button_blank")
        self.button_blank.setIconSize(QtCore.QSize(1380, 900))
        self.button_blank.clicked.connect(self.print_good)
        self.button_blank.setVisible(True)

        # Button for using recyclable bin.
        self.button_recyclable.setGeometry(QtCore.QRect(150, 100, 120, 120))
        self.button_recyclable.setAutoFillBackground(False)
        self.button_recyclable.setStyleSheet("background-color:rgb(170,170,225);\n""\n""border-radius:60px\n""")
        self.button_recyclable.setIcon(Pic_List.icon_Button_pictures_dict.get('Recyclable_button'))
        self.button_recyclable.setIconSize(QtCore.QSize(120, 120))
        self.button_recyclable.setObjectName("button_recyclable")
        self.button_recyclable.setVisible(True)

        # non-recyclable gabbish bin button
        self.button_nonrecyclable.setGeometry(QtCore.QRect(150, 300, 120, 120))
        self.button_nonrecyclable.setAutoFillBackground(False)
        self.button_nonrecyclable.setStyleSheet("border-radius:60px\n""\n""\n""")
        self.button_nonrecyclable.setIcon(Pic_List.icon_Button_pictures_dict.get('Nonrecyclable_button'))
        self.button_nonrecyclable.setIconSize(QtCore.QSize(120, 120))
        self.button_nonrecyclable.setObjectName("button_nonrecyclable")
        self.button_nonrecyclable.setVisible(True)

        # button to enter the status for dustman-use
        self.button_dustman.setGeometry(QtCore.QRect(150, 500, 120, 120))
        self.button_dustman.setAutoFillBackground(False)
        self.button_dustman.setStyleSheet("border-radius:60px\n""\n""\n""")
        self.button_dustman.setIcon(Pic_List.icon_Button_pictures_dict.get('Dustman_button'))
        self.button_dustman.setIconSize(QtCore.QSize(120, 120))
        self.button_dustman.setObjectName("button_dustman")
        self.button_dustman.setVisible(True)

        # button to close the cover of the bin
        self.button_close_cover.setGeometry((QtCore.QRect(554, 617, 153, 88)))
        self.button_close_cover.setAutoFillBackground(False)
        self.button_close_cover.setStyleSheet("border-radius:10px\n""\n""\n""")
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap("GUI_resources/关闭按钮.png"), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.button_close_cover.setIcon(Pic_List.icon_Button_pictures_dict.get('Close_cover'))
        self.button_close_cover.setIconSize(QtCore.QSize(153, 88))
        self.button_close_cover.setObjectName("button_close_cover")
        self.button_close_cover.setVisible(False)

    def set_label(self, location_x , location_y , width , height,
                          pic_location , label_name = 'mainscreen_label', initial_visible = False ) -> QtWidgets.QLabel:

        mainscreen_label = QtWidgets.QLabel(self.Mainwindow)
        mainscreen_label.setGeometry(QtCore.QRect(location_x,location_y,width,height))
        mainscreen_label.setObjectName(label_name)
        mainscreen_label.setVisible(initial_visible)
        mainscreen_label.setStyleSheet(pic_location)
        return mainscreen_label

    def change_label_pic(self, label, pic_location):
        '''Change the picture shows on the label

        Args:
            label: The item
        '''

    def setupUi(self):
        # 息屏按钮
        self.pushButton_screenRelax = QtWidgets.QPushButton(Mainwindow)
        self.pushButton_screenRelax.setGeometry(QtCore.QRect(0, 0, 1280, 800))
        self.pushButton_screenRelax.setAutoFillBackground(False)
        self.pushButton_screenRelax.setObjectName("pushButton_screenRelax")
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap("background-image:url(GUI_resources/faceChanging 1.jpg)"), QtGui.QIcon.Normal,
                        QtGui.QIcon.On)
        self.pushButton_screenRelax.setIcon(icon6)
        self.pushButton_screenRelax.setIconSize(QtCore.QSize(1280, 800))
        self.pushButton_screenRelax.clicked.connect(self.clickButtonScreenRelax)

        # 按钮添加阴影
        self.add_shadow(self.pushButton)
        self.add_shadow(self.buttton_nonrecyclable)
        self.add_shadow(self.pushButton_3)
        self.add_shadow(self.pushButton_4)
        self.add_shadow(self.pushButton_5)
        self.add_shadow2(self.label)
        self.add_shadow2(self.label_2)
        self.add_shadow2(self.label_3)
        self.add_shadow2(self.label_4)
        self.add_shadow2(self.label_5)
        self.add_shadow2(self.label_6)

    # 定义按钮点击事件
    def clickButton1(self):
        if self.pushButton.objectName() == "pushButton_beforeOpen":
            print("1111")
            self.pushButton.setObjectName("pushButton_afterOpen")
            # self.label_4.setVisible(False)
            self.openCover()
            self.timer_for_auto_relax()
        if self.buttton_nonrecyclable.objectName() == "pushButton2" and self.pushButton_3.objectName() == "pushButton3" and self.pushButton.objectName() == "pushButton":
            print("111")

            self.pushButton.setObjectName("pushButton_beforeOpen")
            self.pushButton.setIcon(QIcon(QPixmap("GUI_resources/确认标志.png")))  # 点击后切换按钮图片
            self.label.setVisible(True)
            self.label_4.setVisible(True)
            self.label_6.setVisible(False)
            self.timer_for_auto_relax()

    def clickButton2(self):
        if self.buttton_nonrecyclable.objectName() == "pushButton2_beforeOpen":
            print("1111")
            self.buttton_nonrecyclable.setObjectName("pushButton2_afterOpen")
            self.openCover()
            self.timer_for_auto_relax()
        if self.pushButton.objectName() == "pushButton" and self.pushButton_3.objectName() == "pushButton3" and self.buttton_nonrecyclable.objectName() == "pushButton2":
            print("222")
            self.buttton_nonrecyclable.setIcon(QIcon(QPixmap("GUI_resources/确认标志.png")))  # 点击后切换按钮图片
            self.buttton_nonrecyclable.setObjectName("pushButton2_beforeOpen")
            self.label.setVisible(True)
            self.label_5.setVisible(True)
            self.label_6.setVisible(False)
            self.timer_for_auto_relax()

    def clickButton3(self):
        if self.pushButton_3.objectName() == "pushButton3_beforeOpen":
            print("1111")
            self.pushButton_3.setObjectName("pushButton3_afterOpen")
            # self.openCover()
            self.timer_for_auto_relax()
        if self.pushButton.objectName() == "pushButton" and self.buttton_nonrecyclable.objectName() == "pushButton2" and self.pushButton_3.objectName() == "pushButton3":
            print("333")
            self.pushButton_3.setIcon(QIcon(QPixmap("GUI_resources/确认标志.png")))  # 点击后切换按钮图片
            self.pushButton_3.setObjectName("pushButton3_beforeOpen")
            self.label.setVisible(True)
            self.label_6.setVisible(False)
            self.timer_for_auto_relax()

    def clickButton4(self):
        print("444")
        self.pushButton.setIcon(QIcon(QPixmap("GUI_resources/新可回收标志.png")))  # 点击后切换按钮图片
        self.buttton_nonrecyclable.setIcon(QIcon(QPixmap("GUI_resources/新不可回收标志.png")))  # 点击后切换按钮图片
        self.pushButton_3.setIcon(QIcon(QPixmap("GUI_resources/清洁模式标志.png")))  # 点击后切换按钮图片
        self.pushButton.setObjectName("pushButton")
        self.buttton_nonrecyclable.setObjectName("pushButton2")
        self.pushButton_3.setObjectName("pushButton3")
        self.label.setVisible(False)
        self.label_4.setVisible(False)
        self.label_5.setVisible(False)
        self.label_6.setVisible(True)
        self.timer_for_auto_relax()
        # self.timer_for_pictures_changing()

    def clickButtonScreenRelax(self):
        print("working lo")
        self.pushButton_screenRelax.setVisible(False)
        self.pushButton_screenRelax.setObjectName("screenRelax_clicked")
        self.timer_for_pictures_changing()
        self.timer_for_auto_relax()

    # 开盖丢垃圾程序
    def openCover(self):
        # global Mainwindow
        print("openning")
        self.label.setVisible(False)
        self.label_5.setVisible(False)
        self.label_4.setVisible(False)
        self.label.repaint()
        self.label_4.repaint()
        print("opening 2")
        self.label_2.setVisible(True)
        self.label_2.repaint()  # 缓冲协调#########################################
        # 现在我们尝试在这里用多线程同时控制两个任务：任务1是灯条闪烁；任务2是舵机转动开盖
        p1 = threading.Thread(target=face_detection().light_shinning)
        p2 = threading.Thread(target=duoji().motor_control)
        p1.start()
        p2.start()
        time.sleep(4)  # 开盖等待时间
        self.pushButton_5.setVisible(True)

    # 关盖程序
    def closeCover(self):
        print("close")
        self.label_2.setVisible(False)
        self.pushButton_5.setVisible(False)
        self.label_3.setVisible(True)
        self.label_3.repaint()
        time.sleep(4)  # 关盖等待时间
        self.label_3.setVisible(False)
        self.clickButton4()

    # 按钮阴影特效
    def add_shadow(self, button):
        # 添加阴影
        self.effect_shadow = QGraphicsDropShadowEffect(Mainwindow)
        self.effect_shadow.setOffset(0, 0)  # 偏移
        self.effect_shadow.setBlurRadius(10)  # 阴影半径
        self.effect_shadow.setColor(QtCore.Qt.black)  # 阴影颜色
        button.setGraphicsEffect(self.effect_shadow)  # 将设置套用到button窗口中

    def add_shadow2(self, label):
        # 添加阴影
        self.effect_shadow = QGraphicsDropShadowEffect(Mainwindow)
        self.effect_shadow.setOffset(0, 0)  # 偏移
        self.effect_shadow.setBlurRadius(10)  # 阴影半径
        self.effect_shadow.setColor(QtCore.Qt.black)  # 阴影颜色
        label.setGraphicsEffect(self.effect_shadow)  # 将设置套用到label窗口中

    def change_mainwindow_pictures(self):
        if self.main_screen_picture_number == 4:
            self.main_screen_picture_number = 1
        else:
            self.main_screen_picture_number += 1

        return self.pictures_dict.get(self.main_screen_picture_number)  # 得到第N个图片

    def change_faceChaing_pictures(self):
        if self.relaxingScreen_pictures_total == 13:
            self.relaxingScreen_pictures_total = 1
        else:
            self.relaxingScreen_pictures_total += 1
        return self.relaxingScreen_pictures_dict.get(self.relaxingScreen_pictures_total)

    def back_to_relax(self):
        self.pushButton_screenRelax.setVisible(True)
        #self.pushButton_screenRelax.repaint()
        #self.label_6.repaint()
        self.pushButton_screenRelax.setObjectName("pushButton_screenRelax")
        self.timer_for_faceChaing()

    def timer_for_pictures_changing(self):
        timer = threading.Timer(3, self.timer_for_pictures_changing)  # x秒后就换图片
        timer.setDaemon(True)  # 守护线程
        if self.pushButton_screenRelax.objectName() != "pushButton_screenRelax":
            timer.start()
        print('杰哥不要啊！！！')
        self.label_6.setStyleSheet(self.change_mainwindow_pictures())
        #self.label_6.repaint()

    def timer_for_faceChaing(self):
        timer3 = threading.Timer(0.3, self.timer_for_faceChaing)
        timer3.setDaemon(True)
        # if self.pushButton_screenRelax.isVisible():
        if self.pushButton_screenRelax.objectName() == "pushButton_screenRelax":  # why"is Visbel" cannnot work
            timer3.start()
        print("change")
        #self.pushButton_screenRelax.update()
        self.pushButton_screenRelax.setStyleSheet(self.change_faceChaing_pictures())
        #self.pushButton_screenRelax.repaint()

        # self.pushButton_screenRelax.setStyleSheet(self.change_faceChaing_pictures())
        # self.pushButton_screenRelax.repaint()

    def timer_for_auto_relax(self):
        time4 = threading.Timer(10, self.back_to_relax)
        time4.setDaemon(True)
        print("waiting for relax5555")
        #time4.start()


def timer_create():  # 示例
    time_calculate = threading.Timer(6, timer_create)
    time_calculate.setDaemon(True)
    time_calculate.start()
    print('杰哥不要啊！！！')
    # self.label_6.setStyleSheet(self.change_mainwindow_pictures())


if __name__ == '__main__':
    multiprocessing.freeze_support()
    app = QtWidgets.QApplication(sys.argv)
    import Pic_List
    ui = GUI()  # 调用主函数
    ui.Mainwindow.show()  # 显示
    sys.exit(app.exec_())  # 点击关闭才退出
